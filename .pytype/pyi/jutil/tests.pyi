# (generated with --quick)

import decimal
import jutil.testing
from typing import Any, Generator, List, Optional, Tuple, Type, Union
import xml.etree.ElementTree

APIClient: Any
CommandParser: Any
Decimal: Type[decimal.Decimal]
DefaultTestSetupMixin: Type[jutil.testing.DefaultTestSetupMixin]
ET: module
Element: Type[xml.etree.ElementTree.Element]
LogEntry: Any
TestCase: Any
User: Any
UserAdmin: Any
ValidationError: Any
_: Any
admin: module
date: Type[datetime.date]
datetime: Type[datetime.datetime]
gettext_lazy: Any
os: module
override: Any
pytz: module
settings: Any
timedelta: Type[datetime.timedelta]
translation: module
ucfirst_lazy: Any

class Tests(Any, jutil.testing.DefaultTestSetupMixin):
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_add_month(self) -> None: ...
    def test_admin(self) -> None: ...
    def test_ascii_filter(self) -> None: ...
    def test_bank_info(self) -> None: ...
    def test_bic(self) -> None: ...
    def test_cmd_parser(self) -> None: ...
    def test_country_code(self) -> None: ...
    def test_dates(self) -> None: ...
    def test_dec123456(self) -> None: ...
    def test_dict_to_html(self) -> None: ...
    def test_dict_to_xml(self) -> None: ...
    def test_dict_to_xml2(self) -> None: ...
    def test_dk_banks(self) -> None: ...
    def test_email_filter_and_validation(self) -> None: ...
    def test_fi_ssn_age(self) -> None: ...
    def test_fi_ssn_generator(self) -> None: ...
    def test_format_full_name(self) -> None: ...
    def test_format_table(self) -> None: ...
    def test_format_timedelta(self) -> None: ...
    def test_format_xml(self) -> None: ...
    def test_iban(self) -> None: ...
    def test_ip_info(self) -> None: ...
    def test_l10n(self) -> None: ...
    def test_media_paths(self) -> None: ...
    def test_model_funcs(self) -> None: ...
    def test_named_date_ranges(self) -> None: ...
    def test_org_id(self) -> None: ...
    def test_org_id_fi(self) -> None: ...
    def test_parse_sftp(self) -> None: ...
    def test_parse_xml(self) -> None: ...
    def test_passport(self) -> None: ...
    def test_payment_reference(self) -> None: ...
    def test_per_delta(self) -> None: ...
    def test_per_month(self) -> None: ...
    def test_phone_numbers(self) -> None: ...
    def test_reference_number_validators(self) -> None: ...
    def test_sanitizers(self) -> None: ...
    def test_se_banks(self) -> None: ...
    def test_se_ssn(self) -> None: ...
    def test_ucfirst_lazy(self) -> None: ...
    def test_urls(self) -> None: ...
    def test_validate_country_iban(self) -> None: ...
    def test_xml_to_dict(self) -> None: ...

def _xml_filter_tag_name(tag: str) -> str: ...
def add_date_range_arguments(parser) -> None: ...
def add_month(t: datetime.datetime, n: int = ...) -> datetime.datetime: ...
def admin_log(instances, msg: str, who = ..., **kw) -> None: ...
def admin_obj_link(obj, label: str = ..., route: str = ..., base_url: str = ...) -> str: ...
def admin_obj_url(obj, route: str = ..., base_url: str = ...) -> str: ...
def ascii_filter(v: str) -> str: ...
def be_iban_validator(v: str) -> None: ...
def bic_validator(v: str) -> None: ...
def clone_model(instance, cls: type = ..., commit: bool = ..., exclude_fields: tuple = ..., base_class_suffix: str = ..., **kw) -> Any: ...
def country_code_sanitizer(v: str) -> str: ...
def country_code_validator(v: str) -> None: ...
def dec1(a) -> decimal.Decimal: ...
def dec2(a) -> decimal.Decimal: ...
def dec3(a) -> decimal.Decimal: ...
def dec4(a) -> decimal.Decimal: ...
def dec5(a) -> decimal.Decimal: ...
def dec6(a) -> decimal.Decimal: ...
def dict_to_element(doc: dict, value_key: str = ..., attribute_prefix: str = ...) -> xml.etree.ElementTree.Element: ...
def dict_to_html(data: dict, format_keys: bool = ...) -> str: ...
def dk_clearing_code_bank_name(v: str) -> str: ...
def dk_iban_bank_info(v: str) -> Tuple[str, str]: ...
def dk_iban_validator(v: str) -> None: ...
def ee_iban_validator(v: str) -> None: ...
def email_filter(v: str) -> str: ...
def email_sanitizer(v: str) -> str: ...
def email_validator(v: str) -> None: ...
def fi_company_org_id_generator() -> str: ...
def fi_company_org_id_validator(v0: str) -> None: ...
def fi_iban_validator(v: str) -> None: ...
def fi_payment_reference_number(num: str) -> str: ...
def fi_payment_reference_validator(v: str) -> None: ...
def fi_ssn_age(ssn: str, today: datetime.date = ...) -> int: ...
def fi_ssn_generator() -> str: ...
def fi_ssn_validator(v: str) -> None: ...
def format_full_name(first_name: str, last_name: str, max_length: int = ...) -> str: ...
def format_table(rows: List[list], max_col: int = ..., max_line: int = ..., col_sep: str = ..., row_sep: str = ..., row_begin: str = ..., row_end: str = ..., has_label_row: bool = ..., left_align: List[int] = ..., center_align: List[int] = ...) -> str: ...
def format_timedelta(dt: datetime.timedelta, days_label: str = ..., hours_label: str = ..., minutes_label: str = ..., seconds_label: str = ..., **kwargs) -> str: ...
def format_xml(content: str, encoding: str = ..., exceptions: bool = ...) -> str: ...
def format_xml_bytes(content: bytes, encoding: str = ..., exceptions: bool = ...) -> bytes: ...
def get_date_range_by_name(name: str, today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def get_ip_info(ip: str, exceptions: bool = ..., timeout: int = ...) -> Tuple[str, str, str]: ...
def get_media_full_path(file_path: str) -> str: ...
def get_model_field_label_and_value(instance, field_name: str) -> Tuple[str, str]: ...
def get_object_or_none(cls, **kwargs) -> Any: ...
def iban_bank_info(v: str) -> Tuple[str, str]: ...
def iban_bic(v: str) -> str: ...
def iban_filter_readable(acct) -> str: ...
def iban_validator(v: str) -> None: ...
def is_model_field_changed(instance, field_name: str) -> bool: ...
def iso_payment_reference_validator(v: str) -> None: ...
@overload
def join(path: Union[bytes, _PathLike[bytes]], *paths: Union[bytes, _PathLike[bytes]]) -> bytes: ...
@overload
def join(path: Union[str, _PathLike[str]], *paths: Union[str, _PathLike[str]]) -> str: ...
def last_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_year(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def next_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def next_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def parse_bool(v, default = ..., exceptions: bool = ...) -> bool: ...
def parse_date_range_arguments(options: dict, default_range: str = ...) -> Tuple[datetime.datetime, datetime.datetime, List[Tuple[datetime.datetime, datetime.datetime]]]: ...
def parse_datetime(v: str, default = ..., tz = ..., exceptions: bool = ...) -> datetime.datetime: ...
def parse_sftp_connection(connection: str, exceptions: bool = ...) -> Tuple[str, str, str, str]: ...
def passport_filter(v: str) -> str: ...
def passport_sanitizer(v: str) -> str: ...
def passport_validator(v: str) -> None: ...
def per_delta(start: datetime.datetime, end: datetime.datetime, delta: datetime.timedelta) -> Generator[Tuple[datetime.datetime, datetime.datetime], Any, None]: ...
def per_month(start: datetime.datetime, end: datetime.datetime, n: int = ...) -> Generator[Tuple[datetime.datetime, datetime.datetime], Any, None]: ...
def phone_sanitizer(v: str) -> str: ...
def phone_validator(v: str) -> None: ...
def se_clearing_code_bank_info(account_number: str) -> Tuple[str, Optional[int]]: ...
def se_iban_validator(v: str) -> None: ...
def se_ssn_filter(v: str) -> str: ...
def se_ssn_validator(v: str) -> None: ...
def strip_media_root(file_path: str) -> str: ...
def this_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def this_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def url_equals(a: str, b: str) -> bool: ...
def url_host(url: str) -> str: ...
def url_mod(url: str, new_params: dict) -> str: ...
def validate_country_company_org_id(country_code: str, v: str) -> None: ...
def validate_country_iban(v: str, country: str) -> None: ...
def xml_to_dict(xml_bytes: bytes, tags: list = ..., array_tags: list = ..., int_tags: list = ..., strip_namespaces: bool = ..., parse_attributes: bool = ..., value_key: str = ..., attribute_prefix: str = ..., document_tag: bool = ...) -> dict: ...
def yesterday(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
