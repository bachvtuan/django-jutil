# (generated with --quick)

from typing import Dict, Optional, Type, Union
import xml.etree.ElementTree

Element: Type[xml.etree.ElementTree.Element]
etree: module
re: module

def SubElement(parent: xml.etree.ElementTree.Element, tag: str, attrib: Dict[str, str] = ..., **extra: str) -> xml.etree.ElementTree.Element: ...
def _xml_element_set_data_r(el: xml.etree.ElementTree.Element, data: dict, value_key: str, attribute_prefix: str) -> None: ...
def _xml_element_value(el: xml.etree.ElementTree.Element, is_int: bool = ...) -> Optional[Union[int, str]]: ...
def _xml_filter_tag_name(tag: str) -> str: ...
def _xml_set_element_data_r(data: dict, el: xml.etree.ElementTree.Element, array_tags: list, int_tags: list, strip_namespaces: bool, parse_attributes: bool, value_key: str, attribute_prefix: str) -> None: ...
def _xml_tag_filter(s: str, strip_namespaces: bool) -> str: ...
def dict_to_element(doc: dict, value_key: str = ..., attribute_prefix: str = ...) -> xml.etree.ElementTree.Element: ...
def xml_to_dict(xml_bytes: bytes, tags: list = ..., array_tags: list = ..., int_tags: list = ..., strip_namespaces: bool = ..., parse_attributes: bool = ..., value_key: str = ..., attribute_prefix: str = ..., document_tag: bool = ...) -> dict: ...
