# (generated with --quick)

from typing import Any, Generator, List, Tuple, Type

TIME_RANGE_NAMES: List[str]
TIME_STEP_NAMES: List[str]
datetime: Type[datetime.datetime]
pytz: module
timedelta: Type[datetime.timedelta]

def add_month(t: datetime.datetime, n: int = ...) -> datetime.datetime: ...
def get_last_day_of_month(t: datetime.datetime) -> int: ...
def last_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_year(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def localize_time_range(begin: datetime.datetime, end: datetime.datetime, tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def monthrange(year: int, month: int) -> Tuple[int, int]: ...
def next_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def next_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def per_delta(start: datetime.datetime, end: datetime.datetime, delta: datetime.timedelta) -> Generator[Tuple[datetime.datetime, datetime.datetime], Any, None]: ...
def per_month(start: datetime.datetime, end: datetime.datetime, n: int = ...) -> Generator[Tuple[datetime.datetime, datetime.datetime], Any, None]: ...
def this_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def this_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def yesterday(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
