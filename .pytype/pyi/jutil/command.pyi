# (generated with --quick)

import dateutil.parser
from typing import Any, IO, List, Optional, Tuple, Type, Union

BaseCommand: Any
CommandParser: Any
TIME_RANGE_NAMES: List[str]
TIME_STEP_NAMES: List[str]
datetime: Type[datetime.datetime]
getpass: module
logger: logging.Logger
logging: module
now: Any
pytz: module
re: module
rrule: module
settings: Any
timedelta: Type[datetime.timedelta]
traceback: module
translation: module

class SafeCommand(Any):
    __doc__: str
    def do(self, *args, **kwargs) -> None: ...
    def handle(self, *args, **options) -> None: ...

def add_date_range_arguments(parser) -> None: ...
def get_date_range_by_name(name: str, today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_week(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def last_year(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def localize_time_range(begin: datetime.datetime, end: datetime.datetime, tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def parse(timestr: Union[bytes, str, IO], parserinfo: Optional[dateutil.parser.parserinfo] = ..., **kwargs) -> datetime.datetime: ...
def parse_date_range_arguments(options: dict, default_range: str = ...) -> Tuple[datetime.datetime, datetime.datetime, List[Tuple[datetime.datetime, datetime.datetime]]]: ...
def send_email(recipients: list, subject: str, text: str = ..., html: str = ..., sender: str = ..., files: list = ..., cc_recipients: list = ..., bcc_recipients: list = ..., exceptions: bool = ...) -> Any: ...
def this_month(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
def yesterday(today: datetime.datetime = ..., tz = ...) -> Tuple[datetime.datetime, datetime.datetime]: ...
